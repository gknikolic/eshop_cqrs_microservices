@page
@model CreateProductModel
@{
    ViewData["Title"] = Model.IsEditMode ? "Edit Product" : "Create Product";
}

<h2>@(Model.IsEditMode ? $"Edit Product - {Model.Product.Id}" : "Create Product")  </h2>

<form method="post" enctype="multipart/form-data">
    <input asp-for="Product.Id" type="hidden" class="form-control" />
    <div class="form-group col-md-6">
        <label asp-for="Product.Sku"></label>
        <input asp-for="Product.Sku" class="form-control" />
        <span asp-validation-for="Product.Sku" class="text-danger"></span>
    </div>
    <div class="form-group col-md-6">
        <label asp-for="Product.Name"></label>
        <input asp-for="Product.Name" class="form-control" />
        <span asp-validation-for="Product.Name" class="text-danger"></span>
    </div>
    <div class="form-group col-md-12">
        <label asp-for="Product.Description"></label>
        <textarea asp-for="Product.Description" class="form-control"></textarea>
        <span asp-validation-for="Product.Description" class="text-danger"></span>
    </div>
    <div class="form-group col-md-3">
        <label asp-for="Product.Price"></label>
        <input asp-for="Product.Price" class="form-control" />
        <span asp-validation-for="Product.Price" class="text-danger"></span>
    </div>
    <div class="form-group col-md-3">
        <label asp-for="Product.Category">Category</label>
        <select asp-for="Product.Category" class="form-control" asp-items="Model.CategorySelectList"></select>
        <span asp-validation-for="Product.Category" class="text-danger"></span>
    </div>
    <div class="form-group col-md-3">
        <label asp-for="Product.Color"></label>
        <select asp-for="Product.Color" class="form-control" asp-items="Model.ColorSelectList"></select>
        <span asp-validation-for="Product.Color" class="text-danger"></span>
    </div>

    
    <!-- Product Attributes -->
    <div id="product-attributes">
        <h4>Product Attributes</h4>
        <div class="attributes-container">
            @for (var i = 0; i < Model.Product.ProductAttributes?.Count; i++)
            {
                <div asp-for="Product.ProductAttributes" class="form-group">
                    <div class="row mb-2">
                        <div class="col">
                            <label>Attribute Name</label>
                            <input type="text" class="form-control" asp-for="@Model.Product.ProductAttributes[i].Name" />
                        </div>
                        <div class="col">
                            <label>Attribute Value</label>
                            <input type="text" class="form-control" asp-for="@Model.Product.ProductAttributes[i].Value" />
                        </div>
                        <div class="col-auto align-self-end">
                            <button type="button" class="btn btn-danger remove-attribute">Remove</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <button type="button" class="btn btn-secondary" id="add-attribute">Add Attribute</button>
    </div>

    <div class="form-group">
        <label for="imageUpload">Upload Images</label>
        <div id="dropzone" class="dropzone"></div>
        <span asp-validation-for="Product.ImageFiles" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">@(Model.IsEditMode ? "Update" : "Create")</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.getElementById('add-attribute').addEventListener('click', function () {
            var attributeIndex = document.querySelectorAll('#product-attributes .row').length;
            var newAttribute = `
                <div class="row mb-2">
                    <div class="col">
                        <label>Attribute Name</label>
                        <input type="text" class="form-control" name="Product.ProductAttributes[${attributeIndex}].Name" />
                    </div>
                    <div class="col">
                        <label>Attribute Value</label>
                        <input type="text" class="form-control" name="Product.ProductAttributes[${attributeIndex}].Value" />
                    </div>
                    <div class="col-auto align-self-end">
                        <button type="button" class="btn btn-danger remove-attribute">Remove</button>
                    </div>
                </div>`;
            document.querySelector('.attributes-container').insertAdjacentHTML('beforeend', newAttribute);
            attachRemoveButtonEvent();
        });

        function attachRemoveButtonEvent() {
            document.querySelectorAll('.remove-attribute').forEach(function (button) {
                button.addEventListener('click', function () {
                    this.closest('.row').remove();
                });
            });
        }

        attachRemoveButtonEvent();

        Dropzone.autoDiscover = false;

        var dropzone = new Dropzone("#dropzone", {
            url: "/your-form-handler-url", // This is the same URL as your form's action
            autoProcessQueue: false, // Disable auto-upload
            maxFilesize: 2, // Max file size in MB
            acceptedFiles: ".jpg,.jpeg,.png,.gif",
            addRemoveLinks: true,
            dictDefaultMessage: "Drag and drop images here or click to upload",
            paramName: "Product.ImageFiles", // This corresponds to the property name in your ViewModel
            init: function () {
                var myDropzone = this;

                // Handle form submission
                document.querySelector("form").addEventListener("submit", function (event) {
                    event.preventDefault();
                    // First, upload all files in the queue
                    myDropzone.processQueue();
                });

                this.on("sendingmultiple", function (data, xhr, formData) {
                    // Add additional form data here if needed
                });

                this.on("successmultiple", function (files, response) {
                    // Handle the successful response here
                    // Redirect or update the page as needed
                });

                this.on("errormultiple", function (files, response) {
                    // Handle errors here
                });

                // If you have existing files, add them here
                var existingFiles = @Html.Raw(Json.Serialize(Model.Product.UploadedImages));

                existingFiles.forEach(function (fileName) {
                    var mockFile = { name: fileName, size: 12345 }; // size is required but can be any number
                    myDropzone.emit("addedfile", mockFile);
                    myDropzone.emit("thumbnail", mockFile, "/images/" + fileName);
                    myDropzone.emit("complete", mockFile);

                    // Make sure that the files are marked as successfully uploaded
                    myDropzone.files.push(mockFile);

                    // Optionally, you can disable the removal of existing files
                    mockFile.previewElement.querySelector(".dz-remove").remove();
                }.bind(this));
            }
        });
    </script>
}