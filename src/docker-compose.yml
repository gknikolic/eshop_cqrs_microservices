version: '3.4'

services:
  catalog_read_db:
    image: postgres  
    
  catalog_write_db:
    image: mcr.microsoft.com/mssql/server

  basketdb:
    image: postgres

  inventorydb:
    image: postgres

  customerdb:
    image: mcr.microsoft.com/mssql/server

  distributedcache:
    image: redis

  orderdb:
    image: mcr.microsoft.com/mssql/server

  messagebroker:
    image: rabbitmq:management


  catalog.read.api:
    image: ${DOCKER_REGISTRY-}catalogreadapi
    build:
      context: .
      dockerfile: Services/Catalog/CatalogRead/Catalog.Read.API/Dockerfile

  catalog.write.api:
    image: ${DOCKER_REGISTRY-}catalogwriteapi
    build:
      context: .
      dockerfile: Services/Catalog/CatalogWrite/Catalog.Write.API/Dockerfile

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile

  inventory.api:
    image: ${DOCKER_REGISTRY-}inventoryapi
    build:
      context: .
      dockerfile: Services/Inventory/Inventory.API/Dockerfile

  customer.api:
    image: ${DOCKER_REGISTRY-}customerapi
    build:
      context: .
      dockerfile: Services/Customer/Customer.API/Dockerfile

  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile

  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile

  yarpapigateway:
    image: ${DOCKER_REGISTRY-}yarpapigateway
    build:
      context: .
      dockerfile: ApiGateways/YarpApiGateway/Dockerfile

  shopping.web:
    image: ${DOCKER_REGISTRY-}shoppingweb
    build:
      context: .
      dockerfile: WebApps/Shopping.Web/Dockerfile

volumes:
  postgres_catalog_read:
  sqlserver_catalog_write:
  sqlserver_order:
  sqlserver_customer:
  postgres_basket:
  postgres_inventory:

